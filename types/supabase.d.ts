/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/collections": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.collections.id"];
          title?: parameters["rowFilter.collections.title"];
          owner_id?: parameters["rowFilter.collections.owner_id"];
          is_hidden?: parameters["rowFilter.collections.is_hidden"];
          created_at?: parameters["rowFilter.collections.created_at"];
          updated_at?: parameters["rowFilter.collections.updated_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["collections"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** collections */
          collections?: definitions["collections"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.collections.id"];
          title?: parameters["rowFilter.collections.title"];
          owner_id?: parameters["rowFilter.collections.owner_id"];
          is_hidden?: parameters["rowFilter.collections.is_hidden"];
          created_at?: parameters["rowFilter.collections.created_at"];
          updated_at?: parameters["rowFilter.collections.updated_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.collections.id"];
          title?: parameters["rowFilter.collections.title"];
          owner_id?: parameters["rowFilter.collections.owner_id"];
          is_hidden?: parameters["rowFilter.collections.is_hidden"];
          created_at?: parameters["rowFilter.collections.created_at"];
          updated_at?: parameters["rowFilter.collections.updated_at"];
        };
        body: {
          /** collections */
          collections?: definitions["collections"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_notes_links": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.join_notes_links.id"];
          note_id?: parameters["rowFilter.join_notes_links.note_id"];
          link_id?: parameters["rowFilter.join_notes_links.link_id"];
          owner_id?: parameters["rowFilter.join_notes_links.owner_id"];
          is_added_from_text?: parameters["rowFilter.join_notes_links.is_added_from_text"];
          annotation?: parameters["rowFilter.join_notes_links.annotation"];
          is_in_text?: parameters["rowFilter.join_notes_links.is_in_text"];
          is_hidden?: parameters["rowFilter.join_notes_links.is_hidden"];
          created_at?: parameters["rowFilter.join_notes_links.created_at"];
          updated_at?: parameters["rowFilter.join_notes_links.updated_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_notes_links"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_notes_links */
          join_notes_links?: definitions["join_notes_links"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.join_notes_links.id"];
          note_id?: parameters["rowFilter.join_notes_links.note_id"];
          link_id?: parameters["rowFilter.join_notes_links.link_id"];
          owner_id?: parameters["rowFilter.join_notes_links.owner_id"];
          is_added_from_text?: parameters["rowFilter.join_notes_links.is_added_from_text"];
          annotation?: parameters["rowFilter.join_notes_links.annotation"];
          is_in_text?: parameters["rowFilter.join_notes_links.is_in_text"];
          is_hidden?: parameters["rowFilter.join_notes_links.is_hidden"];
          created_at?: parameters["rowFilter.join_notes_links.created_at"];
          updated_at?: parameters["rowFilter.join_notes_links.updated_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.join_notes_links.id"];
          note_id?: parameters["rowFilter.join_notes_links.note_id"];
          link_id?: parameters["rowFilter.join_notes_links.link_id"];
          owner_id?: parameters["rowFilter.join_notes_links.owner_id"];
          is_added_from_text?: parameters["rowFilter.join_notes_links.is_added_from_text"];
          annotation?: parameters["rowFilter.join_notes_links.annotation"];
          is_in_text?: parameters["rowFilter.join_notes_links.is_in_text"];
          is_hidden?: parameters["rowFilter.join_notes_links.is_hidden"];
          created_at?: parameters["rowFilter.join_notes_links.created_at"];
          updated_at?: parameters["rowFilter.join_notes_links.updated_at"];
        };
        body: {
          /** join_notes_links */
          join_notes_links?: definitions["join_notes_links"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/links": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.links.id"];
          url?: parameters["rowFilter.links.url"];
          title?: parameters["rowFilter.links.title"];
          banner_url?: parameters["rowFilter.links.banner_url"];
          owner_id?: parameters["rowFilter.links.owner_id"];
          is_hidden?: parameters["rowFilter.links.is_hidden"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["links"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** links */
          links?: definitions["links"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.links.id"];
          url?: parameters["rowFilter.links.url"];
          title?: parameters["rowFilter.links.title"];
          banner_url?: parameters["rowFilter.links.banner_url"];
          owner_id?: parameters["rowFilter.links.owner_id"];
          is_hidden?: parameters["rowFilter.links.is_hidden"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.links.id"];
          url?: parameters["rowFilter.links.url"];
          title?: parameters["rowFilter.links.title"];
          banner_url?: parameters["rowFilter.links.banner_url"];
          owner_id?: parameters["rowFilter.links.owner_id"];
          is_hidden?: parameters["rowFilter.links.is_hidden"];
        };
        body: {
          /** links */
          links?: definitions["links"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/notes": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.notes.id"];
          title?: parameters["rowFilter.notes.title"];
          owner_id?: parameters["rowFilter.notes.owner_id"];
          created_at?: parameters["rowFilter.notes.created_at"];
          updated_at?: parameters["rowFilter.notes.updated_at"];
          is_pinned?: parameters["rowFilter.notes.is_pinned"];
          content?: parameters["rowFilter.notes.content"];
          is_hidden?: parameters["rowFilter.notes.is_hidden"];
          deleted_at?: parameters["rowFilter.notes.deleted_at"];
          is_archived?: parameters["rowFilter.notes.is_archived"];
          collection_id?: parameters["rowFilter.notes.collection_id"];
          is_locked?: parameters["rowFilter.notes.is_locked"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["notes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** notes */
          notes?: definitions["notes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.notes.id"];
          title?: parameters["rowFilter.notes.title"];
          owner_id?: parameters["rowFilter.notes.owner_id"];
          created_at?: parameters["rowFilter.notes.created_at"];
          updated_at?: parameters["rowFilter.notes.updated_at"];
          is_pinned?: parameters["rowFilter.notes.is_pinned"];
          content?: parameters["rowFilter.notes.content"];
          is_hidden?: parameters["rowFilter.notes.is_hidden"];
          deleted_at?: parameters["rowFilter.notes.deleted_at"];
          is_archived?: parameters["rowFilter.notes.is_archived"];
          collection_id?: parameters["rowFilter.notes.collection_id"];
          is_locked?: parameters["rowFilter.notes.is_locked"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.notes.id"];
          title?: parameters["rowFilter.notes.title"];
          owner_id?: parameters["rowFilter.notes.owner_id"];
          created_at?: parameters["rowFilter.notes.created_at"];
          updated_at?: parameters["rowFilter.notes.updated_at"];
          is_pinned?: parameters["rowFilter.notes.is_pinned"];
          content?: parameters["rowFilter.notes.content"];
          is_hidden?: parameters["rowFilter.notes.is_hidden"];
          deleted_at?: parameters["rowFilter.notes.deleted_at"];
          is_archived?: parameters["rowFilter.notes.is_archived"];
          collection_id?: parameters["rowFilter.notes.collection_id"];
          is_locked?: parameters["rowFilter.notes.is_locked"];
        };
        body: {
          /** notes */
          notes?: definitions["notes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/waiting_list": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.waiting_list.id"];
          created_at?: parameters["rowFilter.waiting_list.created_at"];
          updated_at?: parameters["rowFilter.waiting_list.updated_at"];
          email?: parameters["rowFilter.waiting_list.email"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["waiting_list"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** waiting_list */
          waiting_list?: definitions["waiting_list"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.waiting_list.id"];
          created_at?: parameters["rowFilter.waiting_list.created_at"];
          updated_at?: parameters["rowFilter.waiting_list.updated_at"];
          email?: parameters["rowFilter.waiting_list.email"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.waiting_list.id"];
          created_at?: parameters["rowFilter.waiting_list.created_at"];
          updated_at?: parameters["rowFilter.waiting_list.updated_at"];
          email?: parameters["rowFilter.waiting_list.email"];
        };
        body: {
          /** waiting_list */
          waiting_list?: definitions["waiting_list"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/fetch_url_metadata": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: uuid */
            link_id: string;
            /** Format: text */
            url: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  collections: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: text */
    title: string;
    /** Format: uuid */
    owner_id: string;
    /** Format: boolean */
    is_hidden: boolean;
    /**
     * Format: timestamp without time zone
     * @default now()
     */
    created_at: string;
    /**
     * Format: timestamp without time zone
     * @default now()
     */
    updated_at: string;
  };
  join_notes_links: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `notes.id`.<fk table='notes' column='id'/>
     */
    note_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `links.id`.<fk table='links' column='id'/>
     */
    link_id: string;
    /** Format: uuid */
    owner_id: string;
    /**
     * Format: boolean
     * @default true
     */
    is_added_from_text: boolean;
    /** Format: text */
    annotation?: string;
    /**
     * Format: boolean
     * @default true
     */
    is_in_text: boolean;
    /** Format: boolean */
    is_hidden: boolean;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at: string;
  };
  links: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: text */
    url: string;
    /** Format: text */
    title?: string;
    /** Format: text */
    banner_url?: string;
    /** Format: uuid */
    owner_id: string;
    /** Format: boolean */
    is_hidden: boolean;
  };
  notes: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: text */
    title?: string;
    /** Format: uuid */
    owner_id: string;
    /**
     * Format: timestamp without time zone
     * @default now()
     */
    created_at: string;
    /**
     * Format: timestamp without time zone
     * @default now()
     */
    updated_at: string;
    /** Format: boolean */
    is_pinned: boolean;
    /** Format: jsonb */
    content: string;
    /** Format: boolean */
    is_hidden: boolean;
    /** Format: timestamp with time zone */
    deleted_at?: string;
    /** Format: boolean */
    is_archived: boolean;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `collections.id`.<fk table='collections' column='id'/>
     */
    collection_id?: string;
    /** Format: boolean */
    is_locked: boolean;
  };
  waiting_list: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at?: string;
    /** Format: text */
    email?: string;
  };
}

export interface parameters {
  /** @description Preference */
  preferParams: "params=single-object";
  /** @description Preference */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /** @description Preference */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description collections */
  "body.collections": definitions["collections"];
  /** Format: uuid */
  "rowFilter.collections.id": string;
  /** Format: text */
  "rowFilter.collections.title": string;
  /** Format: uuid */
  "rowFilter.collections.owner_id": string;
  /** Format: boolean */
  "rowFilter.collections.is_hidden": string;
  /** Format: timestamp without time zone */
  "rowFilter.collections.created_at": string;
  /** Format: timestamp without time zone */
  "rowFilter.collections.updated_at": string;
  /** @description join_notes_links */
  "body.join_notes_links": definitions["join_notes_links"];
  /** Format: uuid */
  "rowFilter.join_notes_links.id": string;
  /** Format: uuid */
  "rowFilter.join_notes_links.note_id": string;
  /** Format: uuid */
  "rowFilter.join_notes_links.link_id": string;
  /** Format: uuid */
  "rowFilter.join_notes_links.owner_id": string;
  /** Format: boolean */
  "rowFilter.join_notes_links.is_added_from_text": string;
  /** Format: text */
  "rowFilter.join_notes_links.annotation": string;
  /** Format: boolean */
  "rowFilter.join_notes_links.is_in_text": string;
  /** Format: boolean */
  "rowFilter.join_notes_links.is_hidden": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_notes_links.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_notes_links.updated_at": string;
  /** @description links */
  "body.links": definitions["links"];
  /** Format: uuid */
  "rowFilter.links.id": string;
  /** Format: text */
  "rowFilter.links.url": string;
  /** Format: text */
  "rowFilter.links.title": string;
  /** Format: text */
  "rowFilter.links.banner_url": string;
  /** Format: uuid */
  "rowFilter.links.owner_id": string;
  /** Format: boolean */
  "rowFilter.links.is_hidden": string;
  /** @description notes */
  "body.notes": definitions["notes"];
  /** Format: uuid */
  "rowFilter.notes.id": string;
  /** Format: text */
  "rowFilter.notes.title": string;
  /** Format: uuid */
  "rowFilter.notes.owner_id": string;
  /** Format: timestamp without time zone */
  "rowFilter.notes.created_at": string;
  /** Format: timestamp without time zone */
  "rowFilter.notes.updated_at": string;
  /** Format: boolean */
  "rowFilter.notes.is_pinned": string;
  /** Format: jsonb */
  "rowFilter.notes.content": string;
  /** Format: boolean */
  "rowFilter.notes.is_hidden": string;
  /** Format: timestamp with time zone */
  "rowFilter.notes.deleted_at": string;
  /** Format: boolean */
  "rowFilter.notes.is_archived": string;
  /** Format: uuid */
  "rowFilter.notes.collection_id": string;
  /** Format: boolean */
  "rowFilter.notes.is_locked": string;
  /** @description waiting_list */
  "body.waiting_list": definitions["waiting_list"];
  /** Format: uuid */
  "rowFilter.waiting_list.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.waiting_list.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.waiting_list.updated_at": string;
  /** Format: text */
  "rowFilter.waiting_list.email": string;
}

export interface operations {}

export interface external {}
